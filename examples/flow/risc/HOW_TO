The objective of the example is to demonstrate how to use VCS with it's built-in
Testbench, Assertions, DirectC and Coverage technologies.

Main Features demonstrated are :

* Native Testbench:

	The complete testbench is written in Native testbench language, a subset
	of OpenVera[tm] testbench constructs. It drives all test vectors to DUT
	as well as C reference models in a self checking mechanism. It also
	demonstrate the usage of different Flow control constructs, High level
	data types, Expects and Randomization supported in Native testbench 
	technology.
	
	The testbench drives two directed test 1) Basic confidence test
	2) Expansion circuit test (Traffic Light Controller) and one constraint-
	driven pseudo-random generation test to improve the testbench
	effectiveness.
	
* Assertion and Coverage:

	Assertions are written in OpenVera Assertion(OVA) language, which 
	concisely capture temporal behaviors that span over multiple cycles
	and modules of the DUT. It also demonstrate how to write assertions for
	a given module at White Box Level and Black Box Level. Furthermore,
	it also shows how to get detailed coverage reports on assertion 
	activity to check the completeness of the verification effort.
	
* VCS DirectC interface:

	The reference model for two module of DUT namely ALU and Decoder Logic,
	has been implemented in C. The example shows how to embed user-created
	C/C++ functions within their Verilog design and/or Native Testbench
	description using VCS DirectC interface. This eliminates manually 
	creating PLI files and integrating them to the simulator.
	
* Coverage Metric:

	The example shows how to use different built-in coverage like line,
	toggle, FSM and condition coverage with VCS. It also demonstrate how to
	run built-in new advanced Observed Coverage (OBC).
	

HOW TO :

Set your VCS_HOME.
Set your VCS_CC pointing to 'gcc'.

1) Run basic confidence test.

%  vcs -R -Mupdate -ntb -f risc8.files +vc ../directc/alu.c ../directc/decoder.c -l risc8.log

NOTE:	Please do "vcs -help" at your command prompt to get details of the
	option used above.
	
What It Will Do:

	Above command runs the basic confidence test with VCS which have DUT
	written in Verilog, testbench written in Native Testbench and reference
	model written in C integrated using DirectC. Please examine risc8.files 
	which list all Verilog files and Native Testbench files passed to the 
	VCS compiler.

2) Run basic confidence test with coverage ON.

% vcs -Mupdate -ntb -f risc8.files +vc ../directc/alu.c ../directc/decoder.c -cm line+cond+tgl -l risc8.log
% simv -cm line+cond+tgl
  
  	You can observe the Coverage summary at the end of the simulation for
  	line, condition and toggle coverage. To get more detail coverage report
  	follow the steps given below.
  	
% cmView -cm line+cond+tgl

	This will open a GUI to traverse through the generated coverage report.
	
3) Run Expansion circuit test with FSM coverage ON

% vcs -Mupdate -ntb -f risc8.files +vc ../directc/alu.c ../directc/decoder.c -cm line+cond+fsm+tgl -l risc8.log
% simv +exp -cm line+cond+fsm+tgl

	+exp, is used with $test$plusargs to load expansion circuit program
	at run time. The expansion circuit has fsm implemented in it, so we 
	can check the fsm coverage also.

% cmView -cm line+cond+fsm+tgl

4) Run Random test

% simv +random -cm line+cond+fsm+tgl
	  
	You can observe that randomization has helped in improving the coverage
	of the DUT. 

5) Run basic confidence test with OBC.

% vcs -Mupdate -ntb -f risc8.files +vc ../directc/alu.c ../directc/decoder.c -cm obc -l risc8.log
% simv -cm obc

	We need to re-compile with -cm obc option to check the Observability
	coverage of the design because we can't check Observability coverage
	with other coverage together. To get the details of the Observability
	coverage in GUI, do the following step.

% obcView -cm obc	
	  
6) Run basic confidence test with Assertions

% vcs -Mupdate -ntb -f risc8_ova.files +vc ../directc/alu.c ../directc/decoder.c -ova_debug -ova_enable_diag
% simv -ova_report risc8.ova.log
  
  	Above command runs the basic confidence test along with Assertions.
  	Please examine the .ova file listed in risc8_ova.files.  


7) Run basic confidence test with Functional coverage

% vcs -Mupdate -ntb -f risc8_ova.files +vc ../directc/alu.c ../directc/decoder.c -ova_cov
% simv -ova_cov

	Above command runs the basic confidence test along with Assertions
	and enables the functional coverage to monitor assertion activity.
	Please do following step to produce functional coverage report.
	
% fcovReport

	This command generates functional coverage report in HTML under 
	simv.vdb/reports/report.index.html. Use your HTML browser to traverse
	through the functional coverage report. 

	
	  